---
- name: Get nova User
  shell: ". /root/admin-openrc.sh && openstack user show nova -f json"
  register: get_nova_user
  ignore_errors: True

- name: Create nova User
  shell: ". /root/admin-openrc.sh && openstack user create --domain \"Default\" --password \"{{ nova_pass }}\" -f json nova"
  when: get_nova_user is failed

- name: Associate nova user to admin role
  shell: ". /root/admin-openrc.sh && openstack role add --project service --user nova admin"

- name: Get nova Service
  shell: ". /root/admin-openrc.sh && openstack service show nova -f json"
  register: get_nova_service
  ignore_errors: True

- name: Create nova Service
  shell: ". /root/admin-openrc.sh && openstack service create --name nova --description \"OpenStack Compute\" -f json compute"
  when: get_nova_service is failed

- name: Get Nova Endpoints
  shell: ". /root/admin-openrc.sh && openstack endpoint list -f json"
  register: get_nova_endpoints
  ignore_errors: True

- name: Parsing Endpoint JSON
  set_fact:
    nova_endpoints: "{{ get_nova_endpoints.stdout | from_json }}"
  when: get_nova_endpoints is succeeded

- name: Create Nova Service Public API Endpoint
  shell: ". /root/admin-openrc.sh && openstack endpoint create -f json --region {{ openstack_region }} compute public http://{{ mgmt_endpoint }}:{{ nova_public_url_port }}"
  when: "nova_endpoints | selectattr('Service Type', 'match', '^'+'compute'+'$') | selectattr('Interface', 'match', '^'+'public'+'$') | selectattr('Service Name', 'match', '^'+'nova'+'$') | selectattr('URL', 'match', '^http:\\/\\/'+(mgmt_endpoint | regex_escape())+':'+(nova_public_url_port | string)+'$') | list | length == 0"

- name: Create Nova Service Internal API Endpoint
  shell: ". /root/admin-openrc.sh && openstack endpoint create -f json --region {{ openstack_region }} compute internal http://{{ ctrl_endpoint }}:{{ nova_internal_url_port }}"
  when: "nova_endpoints | selectattr('Service Type', 'match', '^'+'compute'+'$') | selectattr('Interface', 'match', '^'+'internal'+'$') | selectattr('Service Name', 'match', '^'+'nova'+'$') | selectattr('URL', 'match', '^http:\\/\\/'+(ctrl_endpoint | regex_escape())+':'+(nova_internal_url_port | string)+'$') | list | length == 0"

- name: Create Nova Service Admin API Endpoint
  shell: ". /root/admin-openrc.sh && openstack endpoint create -f json --region {{ openstack_region }} compute admin http://{{ ctrl_endpoint }}:{{ nova_admin_url_port }}"
  when: "nova_endpoints | selectattr('Service Type', 'match', '^'+'compute'+'$') | selectattr('Interface', 'match', '^'+'admin'+'$') | selectattr('Service Name', 'match', '^'+'nova'+'$') | selectattr('URL', 'match', '^http:\\/\\/'+(ctrl_endpoint | regex_escape())+':'+(nova_admin_url_port | string)+'$') | list | length == 0"

- name: Get placement User
  shell: ". /root/admin-openrc.sh && openstack user show placement -f json"
  register: get_placement_user
  ignore_errors: True

- name: Create placement User
  shell: ". /root/admin-openrc.sh && openstack user create --domain \"Default\" --password \"{{ placement_pass }}\" -f json placement"
  when: get_placement_user is failed

- name: Associate placement user to admin role
  shell: ". /root/admin-openrc.sh && openstack role add --project service --user placement admin"

- name: Get placement Service
  shell: ". /root/admin-openrc.sh && openstack service show placement -f json"
  register: get_placement_service
  ignore_errors: True

- name: Create placement Service
  shell: ". /root/admin-openrc.sh && openstack service create --name placement --description \"Placement API\" -f json placement"
  when: get_placement_service is failed

- name: Get Placement Endpoints
  shell: ". /root/admin-openrc.sh && openstack endpoint list -f json"
  register: get_placement_endpoints
  ignore_errors: True

- name: Parsing Endpoint JSON
  set_fact:
    placement_endpoints: "{{ get_placement_endpoints.stdout | from_json }}"
  when: get_placement_endpoints is succeeded

- name: Create Placement Service Public API Endpoint
  shell: ". /root/admin-openrc.sh && openstack endpoint create -f json --region {{ openstack_region }} placement public http://{{ mgmt_endpoint }}:{{ placement_public_url_port }}"
  when: "placement_endpoints | selectattr('Service Type', 'match', '^'+'placement'+'$') | selectattr('Interface', 'match', '^'+'public'+'$') | selectattr('Service Name', 'match', '^'+'placement'+'$') | selectattr('URL', 'match', '^http:\\/\\/'+(mgmt_endpoint | regex_escape())+':'+(placement_public_url_port | string)+'$') | list | length == 0"

- name: Create Placement Service Internal API Endpoint
  shell: ". /root/admin-openrc.sh && openstack endpoint create -f json --region {{ openstack_region }} placement internal http://{{ ctrl_endpoint }}:{{ placement_internal_url_port }}"
  when: "placement_endpoints | selectattr('Service Type', 'match', '^'+'placement'+'$') | selectattr('Interface', 'match', '^'+'internal'+'$') | selectattr('Service Name', 'match', '^'+'placement'+'$') | selectattr('URL', 'match', '^http:\\/\\/'+(ctrl_endpoint | regex_escape())+':'+(placement_internal_url_port | string)+'$') | list | length == 0"

- name: Create Placement Service Admin API Endpoint
  shell: ". /root/admin-openrc.sh && openstack endpoint create -f json --region {{ openstack_region }} placement admin http://{{ ctrl_endpoint }}:{{ placement_admin_url_port }}"
  when: "placement_endpoints | selectattr('Service Type', 'match', '^'+'placement'+'$') | selectattr('Interface', 'match', '^'+'admin'+'$') | selectattr('Service Name', 'match', '^'+'placement'+'$') | selectattr('URL', 'match', '^http:\\/\\/'+(ctrl_endpoint | regex_escape())+':'+(placement_admin_url_port | string)+'$') | list | length == 0"

